[workspace]
resolver = "3"
members = ["crates/anchored-ldb-vfs", "crates/anchored-leveldb"]

[workspace.package]
version      = "0.1.0"
edition      = "2024"
rust-version = "1.85"
repository   = "https://github.com/robofinch/anchored-leveldb"
license      = "MIT OR Apache-2.0"


[workspace.dependencies]
anchored-ldb-vfs    = { version = "0.1.0", path = "crates/anchored-ldb-vfs" }
anchored-leveldb    = { version = "0.1.0", path = "crates/anchored-leveldb" }

# Used to standardize the versions of dependencies across the workspace crates
cfg-if              = "1.0.1"
dyn-clone           = "1.0.19"
fs4                 = "0.13.1"
# I needed a hashbrown feature which, as of Rust 1.87, is only exposed in std's HashMap in nightly.
# (Internally, std uses hashbrown, so normally this dependency is unnecessary.)
hashbrown           = "0.15.4"
# jiff                = "0.2.14"
lender              = "0.3.2"
lending-iterator    = "0.1.7"
log                 = "0.4.27"
rustversion         = "1.0.21"
serde               = "1.0.219"
sorted_vector_map   = "0.2.0"
time                = { version = "0.3.37", default-features = false }
void                = "1.0.2"
zip                 = { version = "4.0.0", default-features = false }


# Out of the lints that do anything (non-deprecated clippy lints, non-migration rust lints),
# AFAICT there are 34 left at the "allow" level :)
[workspace.lints.rust]
# Note: I basically went through every allow-by-default lint, and am linting against
# almost everything, except lints just related to migrating to Edition 2018, 2021, or 2024;
# since this codebase is in Edition 2024, those lints don't have any use here.

ambiguous_negative_literals          = "warn"
closure_returning_async_block        = "warn"
deref_into_dyn_supertrait            = "warn"
elided_lifetimes_in_paths            = "warn"
explicit_outlives_requirements       = "warn"
ffi_unwind_calls                     = "warn"
impl_trait_redundant_captures        = "warn"
let_underscore_drop                  = "warn"
macro_use_extern_crate               = "warn"
# Note: this lint may have false positives.
meta_variable_misuse                 = "warn"
# Note: may be a noisy lint, but explicitly disabling it when necessary should be less error-prone
# than remembering to derive Copy in almost all applicable cases
missing_copy_implementations         = "warn"
missing_debug_implementations        = "warn"
non_ascii_idents                     = "warn"
redundant_imports                    = "warn"
redundant_lifetimes                  = "warn"
# The below lint seems like it might still be worth enabling in Edition 2024, idk, default to sure.
rust_2024_incompatible_pat           = "warn"
# Note: this lint may have false positives.
single_use_lifetimes                 = "warn"
trivial_casts                        = "warn"
trivial_numeric_casts                = "warn"
unit_bindings                        = "warn"
unnameable_types                     = "warn"
unreachable_pub                      = "warn"
# Any module with unsafe code should do `#![expect(unsafe_code)]` at the top,
# in an effort to make it easier to know at a glance whether a module uses `unsafe`.
unsafe_code                          = "warn"
# Will likely become a compile error at some point anyway
unsafe_op_in_unsafe_fn               = "warn"
# Note: this lint could have false positives in a package with multiple crates.
# Here, the packages have one crate each, so it's fine.
unused_crate_dependencies            = "warn"
unused_extern_crates                 = "warn"
unused_import_braces                 = "warn"
unused_lifetimes                     = "warn"
unused_macro_rules                   = "warn"
unused_qualifications                = "warn"
variant_size_differences             = "warn"

# TODO: lint against missing documentation
# missing_docs = "warn"

future_incompatible                  = { level = "warn", priority = -1 }
keyword-idents                       = { level = "warn", priority = -1 }
# Currently, every lint in the `nonstandard_style` group is actually warn-by-default already.
nonstandard_style                    = { level = "warn", priority = -1 }

# Note that the `unused_results` lint is intentionally left as "allow"

# I would enable the following lints if possible, but they're unstable as of the middle of 2025:
#   - fuzzy_provenance_casts
#   - lossy_provenance_casts
#   - multiple_supertrait_upcastable
#   - must_not_suspend
#   - non_exhaustive_omitted_patterns
#   - supertrait_item_shadowing_definition
#   - supertrait_item_shadowing_usage
#   - unqualified_local_imports
# To use the above unstable lints, run `make nightly-clippy`.


[workspace.lints.clippy]
# Note: the strategy here, unlike with rust lints, is to just enable everything, and carve out
# exceptions as needed.
# See clippy.toml as well.


# Defaults
correctness = { level = "deny", priority = -1 }

suspicious  = { level = "warn", priority = -1 }
style       = { level = "warn", priority = -1 }
complexity  = { level = "warn", priority = -1 }
perf        = { level = "warn", priority = -1 }

# The rest
pedantic    = { level = "warn", priority = -1 }
restriction = { level = "warn", priority = -1 }
nursery     = { level = "warn", priority = -1 }
cargo       = { level = "warn", priority = -1 }


# Warnings that should eventually be enabled
missing_docs_in_private_items       = "allow"
missing_errors_doc                  = "allow"
todo                                = "allow"


# Correctness exceptions: there are none.


# Suspicious exceptions

# Yes, it's normally an awful idea to blanket-enable the `restriction` group,
# but it's easier to be warned about a dumb lint and disable it below
# than to figure out in advance which ones deserve to be enabled.
blanket_clippy_restriction_lints    = "allow"


# Style exceptions

# `parse` seems too opaque, the meaning of the `from_str_radix` method is immediately clear.
from_str_radix_10                   = "allow"
# I think `(3..8).contains(x)` looks worse than `3 <= x && x < 8`.
manual_range_contains               = "allow"
# Sometimes I like to be more explicit.
unwrap_or_default                   = "allow"


# Complexity exceptions

# Sometimes helpful with rust-analyzer to not have a super-long type hint.
let_with_type_underscore            = "allow"


# Pedantic exceptions

# `map(..).unwrap_or(..)` is, I think, more readable than `map_or(.., ..)`.
map_unwrap_or                       = "allow"


# Restriction exceptions

# `#[allow]` attributes should be used sparingly, but it's more convenient to simply be able
# to use them when necessary, without extra shenanigans.
# `make find_allow_attributes` can show where any `[allow(` string is, to find the attributes.
allow_attributes                    = "allow"
arbitrary_source_item_ordering      = "allow"
arithmetic_side_effects             = "allow"
# A good lint, but the various "*_fs" modules in anchored-ldb-vfs have so many similar structs,
# no point in adding weird acronym prefixes instead of leaving them namespaced.
error_impl_error                    = "allow"
# Most enums and structs don't need to be #[non_exhaustive] for the sake of semver.
exhaustive_enums                    = "allow"
exhaustive_structs                  = "allow"
# Similar to map_unwrap_or and whatnot
if_then_some_else_none              = "allow"
implicit_return                     = "allow"
missing_trait_methods               = "allow"
missing_inline_in_public_items      = "allow"
mod_module_files                    = "allow"
multiple_inherent_impl              = "allow"
# The extra verbosity seems unnecessary
pattern_type_mismatch               = "allow"
pub_use                             = "allow"
pub_with_shorthand                  = "allow"
separated_literal_suffix            = "allow"
shadow_reuse                        = "allow"
shadow_same                         = "allow"
single_call_fn                      = "allow"
single_char_lifetime_names          = "allow"
# Would only make sense in a #[no_std] crate
std_instead_of_alloc                = "allow"
std_instead_of_core                 = "allow"
question_mark_used                  = "allow"
# This is covered by the `unwrap_used` lint, and seems to be more annoying to `#[expect]`.
unwrap_in_result                    = "allow"


# Nursery exceptions

# I find `if let` and `else` to look much better than `map_or_else`.
option_if_let_else                  = "allow"
# Doesn't really help much, and `#[expect]`ing it is a hassle. Might be good to run the lint
# once in a while, though.
significant_drop_tightening         = "allow"


[workspace.lints.rustdoc]
all = { level = "warn", priority = -1 }
